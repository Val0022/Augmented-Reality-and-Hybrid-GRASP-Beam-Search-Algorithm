// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

using Microsoft.MixedReality.OpenXR.ARSubsystems;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Unity.Collections;
using Unity.XR.CoreUtils;
using UnityEngine;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;

namespace Microsoft.MixedReality.OpenXR
{
    [DefaultExecutionOrder(ARUpdateOrder.k_PlaneManager)]
    [DisallowMultipleComponent]
#if USE_ARFOUNDATION_5_OR_NEWER
    [RequireComponent(typeof(XROrigin))]
#else
    [RequireComponent(typeof(ARSessionOrigin))]
#endif
    public sealed class ARMarkerManager : ARTrackableManager<
        XRMarkerSubsystem,
        XRMarkerSubsystemDescriptor,
        XRMarkerSubsystem.Provider,
        XRMarker,
        ARMarker>
    {
        private static ARMarkerManager m_instance = null;
        public static ARMarkerManager Instance => m_instance;

        [Tooltip("Los tipos de ARMarker que serán detectados.")]
        public ARMarkerType[] enabledMarkerTypes = { ARMarkerType.QRCode };

        [Tooltip("Modo de transformación por defecto para los marcadores detectados.")]
        public TransformMode defaultTransformMode = TransformMode.MostStable;

        public event Action<ARMarkersChangedEventArgs> markersChanged;

        private Dictionary<string, GameObject> spawnedHolograms = new Dictionary<string, GameObject>();

        private static readonly Dictionary<string, Vector3> qrSizes = new Dictionary<string, Vector3>
        {
            { "Caja1" , new Vector3(0.25f,0.4f,0.3f) },
            { "Caja1a" , new Vector3(0.3f,0.4f,0.25f) },
            { "Caja2" , new Vector3(0.19f,0.16f,0.13f) },
            { "Caja2a" , new Vector3(0.13f,0.16f,0.19f) },
            { "Caja3" , new Vector3(0.13f,0.19f,0.16f) },
            { "Caja3a" , new Vector3(0.16f,0.19f,0.13f) },
            { "Caja4" , new Vector3(0.25f,0.3f,0.4f) },
            { "Caja4a" , new Vector3(0.4f,0.3f,0.25f) },
            { "Caja5" , new Vector3(0.12f,0.3f,0.2f) },
            { "Caja5a" , new Vector3(0.2f,0.3f,0.12f) },
            { "Caja6" , new Vector3(0.2f,0.3f,0.12f) },
            { "Caja6a" , new Vector3(0.12f,0.3f,0.2f) },
            { "Caja7" , new Vector3(0.2f,0.3f,0.15f) },
            { "Caja7a" , new Vector3(0.15f,0.3f,0.2f) },
            { "Caja8" , new Vector3(0.19f,0.16f,0.13f) },
            { "Caja8a" , new Vector3(0.13f,0.16f,0.19f) },
            { "Caja9" , new Vector3(0.25f,0.3f,0.4f) },
            { "Caja9a" , new Vector3(0.4f,0.3f,0.25f) },
            { "Caja10" , new Vector3(0.25f,0.4f,0.3f) },
            { "Caja10a" , new Vector3(0.3f,0.4f,0.25f) },
            { "Caja11" , new Vector3(0.25f,0.13f,0.16f) },
            { "Caja11a" , new Vector3(0.16f,0.13f,0.25f) },
            { "Caja12" , new Vector3(0.12f,0.15f,0.12f) },
            { "Caja12a" , new Vector3(0.12f,0.15f,0.12f) },
            { "Caja13" , new Vector3(0.12f,0.16f,0.19f) },
            { "Caja13a" , new Vector3(0.19f,0.16f,0.12f) },
            { "Caja14" , new Vector3(0.15f,0.13f,0.12f) },
            { "Caja14a" , new Vector3(0.12f,0.13f,0.15f) },
            { "Caja15" , new Vector3(0.12f,0.13f,0.15f) },
            { "Caja15a" , new Vector3(0.15f,0.13f,0.12f) },
            { "Caja16" , new Vector3(0.12f,0.19f,0.16f) },
            { "Caja16a" , new Vector3(0.16f,0.19f,0.12f) },
            { "Caja17" , new Vector3(0.12f,0.19f,0.16f) },
            { "Caja17a" , new Vector3(0.16f,0.19f,0.12f) },
            { "Pallet" , new Vector3(0.51f,0.7f,0.61f) }

        };

        private static readonly Dictionary<string, Vector3> qrFixedPositions = new Dictionary<string, Vector3>
        {
            { "Caja1" , new Vector3(0.125f,0.2f,0.46f) },
            { "Caja2" , new Vector3(0.095f,0.48f,0.215f) },
            { "Caja3" , new Vector3(0.325f,0.095f,0.53f) },
            { "Caja4" , new Vector3(0.385f,0.15f,0.2f) },
            { "Caja5" , new Vector3(0.45f,0.15f,0.51f) },
            { "Caja6" , new Vector3(0.1f,0.55f,0.55f) },
            { "Caja7" , new Vector3(0.1f,0.55f,0.075f) },
            { "Caja8" , new Vector3(0.095f,0.61f,0.425f) },
            { "Caja9" , new Vector3(0.385f,0.45f,0.2f) },
            { "Caja10" , new Vector3(0.125f,0.2f,0.15f) },
            { "Caja11" , new Vector3(0.125f,0.465f,0.41f) },
            { "Caja12" , new Vector3(0.33f,0.585f,0.55f) },
            { "Caja13" , new Vector3(0.45f,0.38f,0.515f) },
            { "Caja14" , new Vector3(0.075f,0.625f,0.21f) },
            { "Caja15" , new Vector3(0.33f,0.445f,0.535f) },
            { "Caja16" , new Vector3(0.45f,0.555f,0.53f) },
            { "Caja17" , new Vector3(0.33f,0.285f,0.53f) }
        };

        private Dictionary<string, Quaternion> qrRelativeRotations = new Dictionary<string, Quaternion>
        {
            { "Caja1a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja2a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja3a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja4a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja5a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja6a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja7a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja8a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja9a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja10a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja11a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja12a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja13a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja14a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja15a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja16a", Quaternion.Euler(0f, -90, 0f) },
            { "Caja17a", Quaternion.Euler(0f, -90, 0f) }
    };

        private Dictionary<string, Quaternion> currentRotations = new Dictionary<string, Quaternion>();
        private HashSet<string> fullyRotatedHolograms = new HashSet<string>();

        private GameObject lastScannedHologram = null;

        private int scannedQRCodeCount = 0; 

        private Coroutine hideLastHologramCoroutine = null;

        public ARMarker GetMarker(TrackableId trackableId) =>
            m_Trackables.TryGetValue(trackableId, out ARMarker marker) ? marker : null;

        public void SetTransformMode(TrackableId trackableId, TransformMode transformMode)
        {
            if (enabled && subsystem != null)
            {
                subsystem.SetTransformMode(trackableId, transformMode);
            }
        }

        public NativeArray<byte> GetRawData(TrackableId trackableId, Allocator allocator)
        {
            if (enabled && subsystem != null)
            {
                return subsystem.GetRawData(trackableId, allocator);
            }
            return new NativeArray<byte>();
        }

        public string GetDecodedString(TrackableId trackableId)
        {
            if (enabled && subsystem != null)
            {
                return subsystem.GetDecodedString(trackableId);
            }
            return null;
        }

        public QRCodeProperties GetQRCodeProperties(TrackableId trackableId)
        {
            if (enabled && subsystem != null)
            {
                return subsystem.GetQRCodeProperties(trackableId);
            }
            return new QRCodeProperties();
        }

        protected override GameObject GetPrefab() => null; 

#if USE_ARFOUNDATION_6_OR_NEWER
        protected override void Awake()
        {
            base.Awake();
            trackablesChanged.AddListener(TrackablesChanged);
        }

        protected override void OnDestroy()
        {
            base.OnDestroy();
            trackablesChanged.RemoveListener(TrackablesChanged);
        }

        private void TrackablesChanged(ARTrackablesChangedEventArgs<ARMarker> args)
        {
            markersChanged?.Invoke(new ARMarkersChangedEventArgs(args.added, args.updated, args.removed?.Select(kvp => kvp.Value).ToList()));
        }
#else
        protected override void OnTrackablesChanged(
            List<ARMarker> added,
            List<ARMarker> updated,
            List<ARMarker> removed)
        {
            markersChanged?.Invoke(new ARMarkersChangedEventArgs(added, updated, removed));

            foreach (var marker in added)
            {
                ShowMarker(marker);
            }
        }
#endif

        private string GetBaseQRKey(string qrText)
        {
            if (qrText.EndsWith("a"))
                return qrText.Substring(0, qrText.Length - 1);
            return qrText;
        }



        private void ShowMarker(ARMarker marker)
        {
            if (marker == null) return;

            string qrText = GetDecodedString(marker.trackableId)?.Trim();
            if (string.IsNullOrEmpty(qrText) || !qrSizes.ContainsKey(qrText)) return;

            string baseKey = GetBaseQRKey(qrText);

            if (spawnedHolograms.ContainsKey(qrText) ||
                spawnedHolograms.ContainsKey(baseKey) ||
                spawnedHolograms.ContainsKey(baseKey + "a"))
            {
                return;
            }

            Vector3 cubeSize = qrSizes[qrText];

            GameObject hologram = GameObject.CreatePrimitive(PrimitiveType.Cube);

            Quaternion horizontalRotation = Quaternion.Euler(0, marker.transform.rotation.eulerAngles.y, 0);
            hologram.transform.rotation = horizontalRotation;

            Vector3 adjustedPosition = marker.transform.position;
            //adjustedPosition.y += cubeSize.y / 2; 

            if (qrText == "Pallet")
            {
                adjustedPosition -=
                    hologram.transform.right * (cubeSize.x / 2f) +
                    hologram.transform.forward * (cubeSize.z / 2f)-
                    hologram.transform.up * (cubeSize.y / 2f);
            }

            hologram.transform.position = adjustedPosition;
            hologram.transform.localScale = cubeSize;

            Renderer cubeRenderer = hologram.GetComponent<Renderer>();
            if (cubeRenderer != null)
            {
                cubeRenderer.material.color = (qrText == "Pallet")
                    ? new Color(1f, 1f, 0.6f, 0.5f) 
                    : new Color(0.6f, 1f, 0.6f, 0.5f); 

                if (lastScannedHologram != null && scannedQRCodeCount < 19)
                {
                    lastScannedHologram.SetActive(false);
                }

                lastScannedHologram = hologram;

                scannedQRCodeCount++;

                if (scannedQRCodeCount == 18)
                {
                    if (hideLastHologramCoroutine != null)
                    {
                        StopCoroutine(hideLastHologramCoroutine);                     }
                    hideLastHologramCoroutine = StartCoroutine(HideLastHologramAfterDelay(20f)); 
                }

                spawnedHolograms[qrText] = hologram;
            }
        }


        private IEnumerator HideLastHologramAfterDelay(float delay)
        {
            yield return new WaitForSeconds(delay); 
            if (lastScannedHologram != null)
            {
                lastScannedHologram.SetActive(false); 
                lastScannedHologram = null; 
            }
        }

        protected override void Update()
        {
            base.Update();
            if (enabled && subsystem != null)
            {
                Array.Sort(enabledMarkerTypes);
                if (!enabledMarkerTypes.SequenceEqual(subsystem.EnabledMarkerTypes))
                {
                    subsystem.EnabledMarkerTypes = enabledMarkerTypes;
                }

                if (defaultTransformMode != subsystem.DefaultTransformMode)
                {
                    subsystem.DefaultTransformMode = defaultTransformMode;
                }

                if (spawnedHolograms.TryGetValue("Pallet", out GameObject pallet))
                {
                    Vector3 palletPosition = pallet.transform.position;
                    Quaternion palletRotation = pallet.transform.rotation;

                    foreach (var kvp in qrRelativeRotations)
                    {
                        string key = kvp.Key;
                        Quaternion relativeRotation = kvp.Value;

                        if (spawnedHolograms.TryGetValue(key, out GameObject caja))
                        {
                            Quaternion targetRotation = palletRotation * relativeRotation;

                            if (!currentRotations.ContainsKey(key))
                                currentRotations[key] = caja.transform.rotation;

                            currentRotations[key] = Quaternion.RotateTowards(
                                currentRotations[key],
                                targetRotation,
                                Time.deltaTime * 15f);

                            caja.transform.rotation = currentRotations[key];

                            if (Quaternion.Angle(currentRotations[key], targetRotation) < 1f)
                            {
                                fullyRotatedHolograms.Add(key);
                            }

                            if (fullyRotatedHolograms.Contains(key))
                            {
                                string baseKey = key.Substring(0, key.Length - 1);

                                if (qrFixedPositions.TryGetValue(baseKey, out Vector3 fixedPosition))
                                {
                                    Vector3 finalPos = new Vector3(
                                        fixedPosition.x - 0.255f + palletPosition.x,
                                        fixedPosition.y - 0.35f + palletPosition.y,
                                        fixedPosition.z - 0.305f + palletPosition.z);

                                    caja.transform.position = Vector3.Lerp(
                                        caja.transform.position,
                                        finalPos,
                                        Time.deltaTime * 0.8f);
                                }
                            }


                        }
                    }

                    for (int i = 1; i <= 17; i++)
                    {
                        string cajaKey = $"Caja{i}";

                        if (spawnedHolograms.TryGetValue(cajaKey, out GameObject caja))
                        {
                            Vector3 fixedPosition = qrFixedPositions[cajaKey];
                            Vector3 finalPos = new Vector3(
                                fixedPosition.x - 0.255f + palletPosition.x,
                                fixedPosition.y - 0.35f + palletPosition.y,
                                fixedPosition.z - 0.305f + palletPosition.z);

                            caja.transform.position = Vector3.Lerp(
                                caja.transform.position,
                                finalPos,
                                Time.deltaTime * 0.8f);

                            caja.transform.rotation = palletRotation;
                        }
                    }
                }
            }
        }

        protected override void OnEnable()
        {
            base.OnEnable();
            m_instance = this;
        }

        protected override string gameObjectName => "ARMarker";
    }
}
